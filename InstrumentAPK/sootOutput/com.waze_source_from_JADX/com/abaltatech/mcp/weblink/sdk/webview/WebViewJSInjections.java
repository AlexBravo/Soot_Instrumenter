package com.abaltatech.mcp.weblink.sdk.webview;

import java.lang.reflect.Field;

class WebViewJSInjections {
    public static final String EVENTLIST_INJECT = "(function(){ if((typeof(Element.prototype.eventListenerList) !== 'undefined') === false) { Element.prototype.eventListenerList=null; Element.prototype._addEventListener=Element.prototype.addEventListener; Element.prototype.addEventListener=function(a,b,c) { if(!this.eventListenerList){ this.eventListenerList = {}; } this._addEventListener(a,b,c); if(!this.eventListenerList[a]) { this.eventListenerList[a]=[]; } this.eventListenerList[a].push(b); }; } })();";
    public static final String PROMISCUOUS = "/**@license MIT-promiscuous-ï¿½Ruben Verborgh */ (function (func, obj) { /* Type checking utility function */ function is(type, item) { return (typeof item)[0] == type; } /* Creates a promise, calling callback(resolve, reject), ignoring other parameters. */ function Promise(callback, handler) { /* The `handler` variable points to the function that will 1) handle a .then(resolved, rejected) call 2) handle a resolve or reject call (if the first argument === `is`) Before 2), `handler` holds a queue of callbacks. After 2), `handler` is a finalized .then handler. */ handler = function pendingHandler(resolved, rejected, value, queue, then, i) { queue = pendingHandler.q; /* Case 1) handle a .then(resolved, rejected) call */ if (resolved != is) { return Promise(function (resolve, reject) { queue.push({ p: this, r: resolve, j: reject, 1: resolved, 0: rejected }); }); } /* Case 2) handle a resolve or reject call (`resolved` === `is` acts as a sentinel) The actual function signature is .re[ject|solve](<is>, success, value) */ /* Check if the value is a promise and try to obtain its `then` method */ if (value && (is(func, value) | is(obj, value))) { try { then = value.then; } catch (reason) { rejected = 0; value = reason; } } /* If the value is a promise, take over its state */ if (is(func, then)) { function valueHandler(resolved) { return function (value) { then && (then = 0, pendingHandler(is, resolved, value)); }; } try { then.call(value, valueHandler(1), rejected = valueHandler(0)); } catch (reason) { rejected(reason); } } /* The value is not a promise; handle resolve/reject */ else { /* Replace this handler with a finalized resolved/rejected handler */ handler = function (Resolved, Rejected) { /* If the Resolved or Rejected parameter is not a function, return the original promise (now stored in the `callback` variable) */ if (!is(func, (Resolved = rejected ? Resolved : Rejected))) return callback; /* Otherwise, return a finalized promise, transforming the value with the function */ return Promise(function (resolve, reject) { finalize(this, resolve, reject, value, Resolved); }); }; /* Resolve/reject pending callbacks */ i = 0; while (i < queue.length) { then = queue[i++]; /* If no callback, just resolve/reject the promise */ if (!is(func, resolved = then[rejected])) (rejected ? then.r : then.j)(value); /* Otherwise, resolve/reject the promise with the result of the callback */ else finalize(then.p, then.r, then.j, value, resolved); } } }; /* The queue of pending callbacks; garbage-collected when handler is resolved/rejected */ handler.q = []; /* Create and return the promise (reusing the callback variable) */ callback.call(callback = { then:    function (resolved, rejected) { return handler(resolved, rejected); }, \"catch\": function (rejected)           { return handler(0,        rejected); } }, function (value)  { handler(is, 1,  value); }, function (reason) { handler(is, 0, reason); }); return callback; } /* Simple implementation of setImmediate function */ function setImmediate() { var args = Array.prototype.slice.call(arguments); var handler = args.shift(); setTimeout(function(){ handler.apply(this, args); }, 0); } /* Finalizes the promise by resolving/rejecting it with the transformed value */ function finalize(promise, resolve, reject, value, transform) { setImmediate(function () { try { /* Transform the value through and check whether it's a promise */ value = transform(value); transform = value && (is(obj, value) | is(func, value)) && value.then; /* Return the result if it's not a promise */ if (!is(func, transform)) resolve(value); /* If it's a promise, make sure it's not circular */ else if (value == promise) reject(TypeError()); /* Take over the promise's state */ else transform.call(value, resolve, reject); } catch (error) { reject(error); } }); } /* Creates a resolved promise */ Promise.resolve = ResolvedPromise; function ResolvedPromise(value) { return Promise(function (resolve) { resolve(value); }); } /* Creates a rejected promise */ Promise.reject = function (reason) { return Promise(function (resolve, reject) { reject(reason); }); }; /* Transforms an array of promises into a promise for an array */ Promise.all = function (promises) { return Promise(function (resolve, reject, count, values) { /* Array of collected values */ values = []; /* Resolve immediately if there are no promises */ count = promises.length || resolve(values); /* Transform all elements (`map` is shorter than `forEach`) */ promises.map(function (promise, index) { ResolvedPromise(promise).then( /* Store the value and resolve if it was the last */ function (value) { values[index] = value; --count || resolve(values); }, /* Reject if one element fails */ reject); }); }); }; window.Promise = Promise; })('f', 'o');";
    public static final String VEHICLE_INFO = "/* TODO */ /* TODO: Check for localStorage and for \"$.\" and for comments */ /* TODO */ /*********************************************************************** * * Note: Never use single line comments in JS code injected in web views! *       It makes the rest of the code a comment! * ***********************************************************************/ window.abaltatech = window.abaltatech || {}; window.abaltatech.vehicleinfo_inject = window.abaltatech.vehicleinfo_inject || {}; var ns_vehicleinfo_inject = window.abaltatech.vehicleinfo_inject; /************** * Notifications **************/ /** * Creates an instance of the NotificationList class. * @class Represents a notification list that can register/unregister listeners and notifies them for an event. */ ns_vehicleinfo_inject.NotificationList = function () { /** * The counter for the listeners ID in the list. */ this.idCounter = 0; /** * Map with key listener ID and value the listener. */ this.listenerMap = {}; }; /** * Registers listener which will be notified when event occurs. * * @param listener The listener object that will be registered. * * @returns the ID of the listener. */ ns_vehicleinfo_inject.NotificationList.prototype.registerListener = function(listener) { var id = null; if (listener) { this.idCounter += 1; var id = this.idCounter; this.listenerMap[id] = listener; } return id; }; /** * Unregisters listener by ID. * * @param id The ID of the listener that will be unregistered. */ ns_vehicleinfo_inject.NotificationList.prototype.unregisterListener = function(id) { if (id) { delete this.listenerMap[id]; } }; /** * Notifies all listeners for event. * * @param {String} notificationType The type of the notification. * @param args An array containing the arguments for the notification. */ ns_vehicleinfo_inject.NotificationList.prototype.notifyAll = function(notificationType, args) { if (notificationType) { for (var nId in this.listenerMap) { var listener = this.listenerMap[nId]; if (listener && typeof (listener[notificationType]) == \"function\") { listener[notificationType].apply(listener, args); } } } }; ns_vehicleinfo_inject.notificationList = new ns_vehicleinfo_inject.NotificationList(); /************************ * Data storage simulation ************************/ window.abaltatech.vehicle_data_storage_fn = function () { }; window.abaltatech.vehicle_data_storage_fn.prototype = { setItem: function(name, value){ this[name] = value; }, getItem: function(name) { return this[name]; }, removeItem: function(name) { if (this[name] && typeof this[name] !== 'function') { delete this[name]; } }, clear: function(){ for (var name in this){ if (this.hasOwnProperty(name)) delete this[name]; } } }; window.abaltatech.vehicle_data_storage = new window.abaltatech.vehicle_data_storage_fn(); var ns_data_storage = window.abaltatech.vehicle_data_storage; ns_data_storage.setItem(\"abaltatech_vehdata_timestamp\", 0); /***************************** * jQuery-like helper functions *****************************/ ns_vehicleinfo_inject._proxy = function (func, obj) { if (typeof(func)!=\"function\") return; /* If obj is empty or another set another object  */ if (!obj) obj=this; return function () { return func.apply(obj, arguments); } }; ns_vehicleinfo_inject._each = function(obj, func) { var value; for (var x in obj) { if (obj.hasOwnProperty(x)) { value = func.call(obj[x], x, obj[x]); if (value === false) { break; } } } return obj; }; /***************************************************************************** * Public Vehicle Information APIs * *****************************************************************************/ ns_vehicleinfo_inject.VehicleInterface = function(attrName, valueNames, zone) { /* Public attributes: */ this.supported = false; this.zones = zone; /* Private attributes: */ this.m_attrName = attrName; this.m_valueNames = {None: []}; this.m_lastAvailabilityTimeStamp = 0; this.m_available = ns_vehicleinfo_inject.Availability.NOT_SUPPORTED; }; ns_vehicleinfo_inject.Zone = function (validZones) { /* Public attributes */ this.driver = ns_vehicleinfo_inject.Zone.FRONT; this.passenger = ns_vehicleinfo_inject.Zone.REAR; this.value = validZones; }; ns_vehicleinfo_inject.Zone.FRONT = \"Front\"; ns_vehicleinfo_inject.Zone.MIDDLE = \"Middle\"; ns_vehicleinfo_inject.Zone.RIGHT = \"Right\"; ns_vehicleinfo_inject.Zone.LEFT = \"Left\"; ns_vehicleinfo_inject.Zone.REAR = \"Rear\"; ns_vehicleinfo_inject.Zone.CENTER = \"Center\"; ns_vehicleinfo_inject.Zone.m_NO_ZONE = \"None\"; ns_vehicleinfo_inject.Zone.prototype.contains = function(zone) { return (this.value.indexOf(zone) !== -1) }; ns_vehicleinfo_inject.Zone.prototype.equals = function (zone) { if ( zone.value.length !== this.value.length) { return false; } for ( var i = 0; i < zone.value.length; i++ ) { if ( !(this.contains(zone[i])) ) { return false; } } for ( var i = 0; i < this.value.length; j++) { if ( !(zone.contains(this[j])) ) { return false; } } return true; }; /* Enum VehicleError */ ns_vehicleinfo_inject.VehicleError = { PERMISSION_DENIED : \"permission_denied\", INVALID_OPERATION : \"invalid_operation\", TIMEOUT : \"timeout\", INVALID_ZONE : \"invalid_zone\", UNKNOWN : \"unknown\" }; ns_vehicleinfo_inject.VehicleInterfaceError = function (error, msg) { this.error = error; this.message = msg; }; /* Enum Availability */ ns_vehicleinfo_inject.Availability = { AVAILABLE : \"available\", NOT_SUPPORTED : \"not_supported\", NOT_SUPPORTED_YET : \"not_supported_yet\", NOT_SUPPORTED_SECURITY : \"not_supported_security\", NOT_SUPPORTED_POLICY : \"not_supported_policy\", NOT_SUPPORTED_OTHER : \"not_supported_other\" }; /* Enum FuelConfiguration */ ns_vehicleinfo_inject.FuelConfiguration = { GASOLINE : \"gasoline\", METHANOL: \"methanol\", ETHANOL: \"ethanol\", DIESEL : \"diesel\", LPG : \"lpg\", CNG : \"cng\", PROPANE : \"propane\", ELECTRIC : \"electric\" }; /* Enum TransmissionConfiguration */ ns_vehicleinfo_inject.TransmissionConfiguration = { AUTO : \"auto\", MANUAL : \"manual\", CVT : \"cvt\" }; /* Enum VehiclePowerModeType */ ns_vehicleinfo_inject.VehiclePowerModeType = { OFF : \"off\", ACCESSORY1 : \"accessory1\", ACCESSORY2 : \"accessory2\", RUNNING : \"running\" }; /* Enum Transmission */ ns_vehicleinfo_inject.Transmission = { PARK :\"park\", REVERSE : \"reverse\", NEUTRAL : \"neutral\", DRIVE : \"drive\" }; /* Enum DriverMode */ ns_vehicleinfo_inject.DriveMode = { COMFORT : \"comfort\", AUTO : \"auto\", SPORT : \"sport\", ECO : \"eco\", MAUNUAL : \"manual\" }; /* Enum Door */ ns_vehicleinfo_inject.Door = { OPEN : \"open\", AJAR : \"ajar\", CLOSE : \"close\" }; /* Enum Seat */ ns_vehicleinfo_inject.Seat = { ADULT : \"adult\", CHILD : \"child\", VACANT : \"vacant\" }; /* Enum WiperSetting */ ns_vehicleinfo_inject.WiperSetting = { OFF : \"off\", ONCE : \"once\", SLOWEST : \"slowest\", SLOW : \"slow\", MIDDLE : \"middle\", FAST : \"fast\", FASTEST : \"fastest\", AUTO : \"auto\" }; /* Enum ConvertibleRoof */ ns_vehicleinfo_inject.ConvertibleRoof = { CLOSED : \"closed\", CLOSING : \"closing\", OPENING : \"opening\", OPENED : \"opened\" }; /* Enum ClimateControl */ ns_vehicleinfo_inject.ClimateControl = { FRONTPANEL : \"frontpanel\", FLOORDUCT : \"floorduct\", BILEVEL : \"bilevel\", DEFROSTFLOOR : \"defrostfloor\" }; /* Enum LaneDepartureDetection */ ns_vehicleinfo_inject.LaneDepartureDetection = { OFF : \"off\", PAUSE : \"pause\", RUNNING : \"running\" }; /* Enum Alarm */ ns_vehicleinfo_inject.Alarm = { DISARMED :  \"disarmed\", PREARMED : \"prearmed\", ARMED : \"armed\", ALARMED : \"alarmed\" }; /* Enum ParkingBrake */ ns_vehicleinfo_inject.ParkingBrakes = { INACTIVE : \"inactive\", ACTIVE : \"active\", ERROR : \"error\" }; ns_vehicleinfo_inject.Availability.isValidValue = function( valueToCheck ) { if (ns_vehicleinfo_inject.Availability.AVAILABLE === valueToCheck) return true; if (this.NOT_SUPPORTED === valueToCheck) return true; if (this.NOT_SUPPORTED_YET === valueToCheck) return true; if (this.NOT_SUPPORTED_SECURITY === valueToCheck) return true; if (this.NOT_SUPPORTED_POLICY === valueToCheck) return true; if (this.NOT_SUPPORTED_OTHER === valueToCheck) return true; return false; }; ns_vehicleinfo_inject.VehicleInterface.prototype.available = function() { return this._getAvailable().availability; }; ns_vehicleinfo_inject.VehicleInterface.prototype.availabilityChangedListener = function( callback ) { var listener = {}; listener[this.m_attrName + \"Available\"] = callback; var handle = ns_vehicleinfo_inject.notificationList.registerListener( listener ); if (!ns_vehicleinfo_inject.m_timer ) { ns_vehicleinfo_inject._startTimer(); } return handle; }; ns_vehicleinfo_inject.VehicleInterface.prototype.removeAvailabilityChangedListener = function ( handle ) { ns_vehicleinfo_inject.notificationList.unregisterListener(handle); }; /** * must return the Promise. The \"resolve\" callback in the promise is used to pass the vehicle data * type that corresponds to the specific VehicleInterface instance. For example, * \"vehicle.vehicleSpeed\" corresponds to the \"VehicleSpeed\" data type */ ns_vehicleinfo_inject.VehicleInterface.prototype.get = function ( zone ) { var promise = new Promise(ns_vehicleinfo_inject._proxy(function(resolve, reject) { if ( !zone ) { zone = ns_vehicleinfo_inject.Zone.m_NO_ZONE; } if(!this.m_valueNames[zone]) { reject(new ns_vehicleinfo_inject.VehicleInterfaceError(ns_vehicleinfo_inject.VehicleError.INVALID_ZONE + \" (\" + zone + \")\")); } if ( this.available() === ns_vehicleinfo_inject.Availability.AVAILABLE ) { resolve( this._getVehicleObject(zone).vehicleObject); } else { reject(new ns_vehicleinfo_inject.VehicleInterfaceError(ns_vehicleinfo_inject.VehicleError.PERMISSION_DENIED, \"Cannot call get(); vehicle interface \" + this.m_attrName + \" is not available.\")); } }, this)); return promise; }; ns_vehicleinfo_inject.VehicleInterface.prototype.set = function ( value, zone ) { var promise = new Promise (ns_vehicleinfo_inject._proxy(function(resolve, reject) { /* If there is a zone present, but is not a valid zone  */ if(zone && !this.zones.contains(zone)) { reject(new ns_vehicleinfo_inject.VehicleInterfaceError(ns_vehicleinfo_inject.VehicleError.INVALID_ZONE)); } /* If the property is available */ if ( this.available() === ns_vehicleinfo_inject.Availability.AVAILABLE  ) { /* If no zone make it equal \"None\" */ if ( !zone ) { zone = ns_vehicleinfo_inject.Zone.m_NO_ZONE; } /* Iterates through the subProperties */ ns_vehicleinfo_inject._each(this.m_valueNames[zone].values, ns_vehicleinfo_inject._proxy(function(i, property) { /* Handle cases where zone is in the parameter    */ if ( value[property]) { this._setValue(property, value[property], zone); } }, this )); resolve(); } else { reject(new ns_vehicleinfo_inject.VehicleInterfaceError(ns_vehicleinfo_inject.VehicleError.PERMISSION_DENIED, \"Vehicle interface \" + this.m_attrName + \" is not available.\")); } }, this)); return promise; }; /* Keep track of changes create notification list in constructor and adding to it in subscribe adding the id ( just a number), returned in this function */ ns_vehicleinfo_inject.VehicleInterface.prototype.subscribe = function ( callback, zone ) { /* If no error, return the handle to the subscription From the callback method passed in?*/ if ( this.available() === \"available\") { var listener = {}; listener[this.m_attrName + \"_\" + (zone || ns_vehicleinfo_inject.Zone.m_NO_ZONE)] = callback; console.debug(\"Registering with listenr \" + (this.m_attrName + \"_\" + (zone || ns_vehicleinfo_inject.Zone.m_NO_ZONE))); var handle = ns_vehicleinfo_inject.notificationList.registerListener( listener ); if (!ns_vehicleinfo_inject.m_timer) { /*&& ns_vehicleinfo_inject.m_subscribers.length <= 0  ) { */ ns_vehicleinfo_inject._startTimer(); } return handle; } else { return 0; } }; /* Unsubscribes to value changes on this interface */ ns_vehicleinfo_inject.VehicleInterface.prototype.unsubscribe = function ( handle ) { ns_vehicleinfo_inject.notificationList.unregisterListener(handle); }; /***************************************************************************** * Private Vehicle Information APIs (to be used by the simulator app). * Do not call directly. * *****************************************************************************/ /* Save method */ ns_vehicleinfo_inject.VehicleInterface.prototype._setAvailable = function(availableVal) { /* Make sure the value is valid first */ if( !ns_vehicleinfo_inject.Availability.isValidValue( availableVal ) ) { availableVal = ns_vehicleinfo_inject.Availability.NOT_SUPPORTED; } /* abaltatech_vehdata_<m_attrName>      */ ns_data_storage.setItem(\"abaltatech_vehdata_\" + this.m_attrName, availableVal); }; ns_vehicleinfo_inject.VehicleInterface.prototype._getAvailable = function () { var oldVal = this.m_available; var newVal = ns_data_storage.getItem(\"abaltatech_vehdata_\" + this.m_attrName); if( !ns_vehicleinfo_inject.Availability.isValidValue( newVal ) ) { /* If not a valid value, set to NOT_SUPPORTED by default */ newVal = ns_vehicleinfo_inject.Availability.NOT_SUPPORTED } this.supported = (newVal === ns_vehicleinfo_inject.Availability.AVAILABLE); this.m_available = newVal; this.m_lastAvailablityTimeStamp  = new Date().getTime(); return { 'availability' : newVal, 'changed' : (oldVal !== newVal) }; }; ns_vehicleinfo_inject.VehicleInterface.prototype._getVehicleObject = function(zone) { var vehicleObject = {}; var changed = false; if ( !zone ) { zone = ns_vehicleinfo_inject.Zone.m_NO_ZONE; } ns_vehicleinfo_inject._each ( this.m_valueNames[zone].values, ns_vehicleinfo_inject._proxy(function(index, properties) { var oldVal = this[index]; var nextVal = this._getValue (properties, zone); if ( nextVal !== oldVal ) { changed = true; } vehicleObject[properties] = nextVal; }, this )); vehicleObject[\"timestamp\"] = new Date().getTime(); return { 'vehicleObject' : vehicleObject, 'changed' : changed }; }; /* Get method */ ns_vehicleinfo_inject.VehicleInterface.prototype._getValueNames = function() { return this.m_valueNames; }; ns_vehicleinfo_inject.VehicleInterface.prototype._setValue = function( valueName, value, zone ) { var name = \"abaltatech_vehdata_\" + this.m_attrName + \"_\" + valueName; if(zone && zone !== ns_vehicleinfo_inject.Zone.m_NO_ZONE) { name += \"_\" + zone; } ns_data_storage.setItem(\"abaltatech_vehdata_timestamp\", new Date().getTime() ); return ns_data_storage.setItem(name, value); }; ns_vehicleinfo_inject.VehicleInterface.prototype._getValue = function( valueName, zone ) { var name = \"abaltatech_vehdata_\" + this.m_attrName + \"_\" + valueName; if(zone && zone !== ns_vehicleinfo_inject.Zone.m_NO_ZONE) { name += \"_\" + zone; } this.m_valueNames[zone].timestamp = new Date().getTime(); return ns_data_storage.getItem(name); }; ns_vehicleinfo_inject.Vehicle = function() { var vehicleSpeedValues = {}; vehicleSpeedValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = {\"speed\" : 0}; this.vehicleSpeed = this._buildVehicleInterface(\"vehicleSpeed\", vehicleSpeedValues); var engineSpeedValues = {}; engineSpeedValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = {\"speed\" : 0}; this.engineSpeed = this._buildVehicleInterface(\"engineSpeed\", engineSpeedValues); var identificationValues = {}; identificationValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = {\"VIN\" : 50, \"WMI\": 0, \"brand\" : null, \"model\" : \"T\", \"vehicleType\": \"Sedan\", \"year\": 2013}; this.identification = this._buildVehicleInterface(\"identification\", identificationValues); var sizeConfigurationValues = {}; sizeConfigurationValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = {\"width\": 0, \"height\": 0, \"_length\" : 0, \"doorsCount\" : 2, \"totalDoors\" : 2, \"vehicleType\" : null}; this.sizeConfiguration = this._buildVehicleInterface(\"sizeConfiguration\", sizeConfigurationValues); var fuelConfigurationValues = {}; fuelConfigurationValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = {\"fuelType\" : 0, \"refuelPosition\" : 0}; this.fuelConfiguration = this._buildVehicleInterface(\"fuelConfiguration\", fuelConfigurationValues); var transmissionConfigurationValues = {}; transmissionConfigurationValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"transmissionGearType\"]; this.transmissionConfiguration = this._buildVehicleInterface(\"transmissionConfiguration\", transmissionConfigurationValues); var wheelConfigurationValues = {}; wheelConfigurationValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"frontWheelRadius\", \"rearWheelRadius\", \"wheelInfoRadius\"]; this.wheelConfiguration = this._buildVehicleInterface(\"wheelConfiguration\", wheelConfigurationValues); var steeringConfigurationValues = {}; steeringConfigurationValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"steeringWheelLeft\"]; this.steeringConfiguration = this._buildVehicleInterface(\"steeringConfiguration\", steeringConfigurationValues); var vehiclePowerModeTypeValues = {}; vehiclePowerModeTypeValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"value\"]; this.vehiclePowerModeType = this._buildVehicleInterface(\"vehiclePowerModeType\", vehiclePowerModeTypeValues); var powerTrainTorqueValues = {}; powerTrainTorqueValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"value\"]; this.powerTrainTorque = this._buildVehicleInterface(\"powerTrainTorque\", powerTrainTorqueValues); var acceleratorPedalPositionValues = {}; acceleratorPedalPositionValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"value\"]; this.acceleratorPedalPosition = this._buildVehicleInterface(\"acceleratorPedalPosition\", acceleratorPedalPositionValues); var throttlePositionValues = {}; throttlePositionValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"value\"]; this.throttlePosition = this._buildVehicleInterface(\"throttlePosition\", throttlePositionValues); var tripMeterValues = {}; tripMeterValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"averageSpeed\", \"distance\", \"fuelConsumption\"]; this.tripMeter = this._buildVehicleInterface(\"tripMeter\", tripMeterValues); var diagnosticValues = {}; diagnosticValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"accumulatedEngineRuntime\", \"distanceSinceCodeCleared\", \"distanceWithMILOn\", \"timeRunMILOn\", \"timeTroubleCodeClear\"]; this.diagnostic = this._buildVehicleInterface(\"diagnostic\", diagnosticValues); var transmissionValues = {}; transmissionValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"gear\", \"mode\"]; this.transmission = this._buildVehicleInterface(\"transmission\", transmissionValues); var cruiseControlStatusValues = {}; cruiseControlStatusValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"Speed\", \"status\"]; this.cruiseControlStatus = this._buildVehicleInterface(\"cruiseControlStatus\", cruiseControlStatusValues); var lightStatusValues = {}; lightStatusValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"automaticHeadlights\", \"brake\", \"dynamicHighBeam\", \"fog\", \"hazard\", \"head\", \"highBeam\", \"leftTurn\", \"parking\", \"rightTurn\"]; this.lightStatus = this._buildVehicleInterface(\"lightStatus\", lightStatusValues); var interiorLightStatusValues = {}; interiorLightStatusValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"status\"]; this.interiorLightStatus = this._buildVehicleInterface(\"interiorLightStatus\", interiorLightStatusValues); var hornValues = {}; hornValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"status\"]; this.horn = this._buildVehicleInterface(\"Horn\", hornValues); var chimeValues = {}; chimeValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"status\"]; this.chime = this._buildVehicleInterface(\"chime\", chimeValues); var fuelValues = {}; fuelValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"averageConsumption\", \"fuelConsumedSinceRestart\", \"instantConsumption\", \"level\", \"range\", \"vehicleTimeSinceRestart\"]; this.fuel = this._buildVehicleInterface(\"fuel\", fuelValues); var engineOilValues = {}; engineOilValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"change\", \"pressure\", \"remaining\", \"temperature\"]; this.engineOil = this._buildVehicleInterface(\"engineOil\", engineOilValues); var accelerationValues = {}; accelerationValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"x\", \"y\", \"z\"]; this.acceleration = this._buildVehicleInterface(\"acceleration\", accelerationValues); var engineCoolantValues = {}; engineCoolantValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"level\", \"temperature\"]; this.engineCoolant = this._buildVehicleInterface(\"engineCoolant\", engineCoolantValues); var deadReckoningValues = {}; deadReckoningValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"steeringWheelAngle\", \"wheelTickSensor\"]; this.deadReckoning = this._buildVehicleInterface(\"deadReckoning\", deadReckoningValues); var odometerValues = {}; odometerValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"distanceSinceStart\", \"distanceTotal\"]; this.odometer = this._buildVehicleInterface(\"odometer\", odometerValues); var transmissionOilValues = {}; transmissionOilValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"temperature\", \"wear\"]; this.transmissionOil = this._buildVehicleInterface(\"transmissionOil\", transmissionOilValues); var transmissionClutchValues = {}; transmissionClutchValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"wear\"]; this.transmissionClutch = this._buildVehicleInterface(\"transmissionClutch\", transmissionClutchValues); var brakeValues = {}; brakeValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = {\"brakesWorn\" : true, \"fluidLevel\" : 0, \"fluidLevelLow\" : 40}; brakeValues[ns_vehicleinfo_inject.Zone.FRONT] = [\"padWear\"]; brakeValues[ns_vehicleinfo_inject.Zone.REAR] = [\"padWear\"]; brakeValues[ns_vehicleinfo_inject.Zone.LEFT] = [\"padWear\"]; brakeValues[ns_vehicleinfo_inject.Zone.RIGHT] = [\"padWear\"]; this.brake = this._buildVehicleInterface(\"brake\", brakeValues); var washerFluidValues = {}; washerFluidValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"level\", \"levelLow\"]; this.washerFluid = this._buildVehicleInterface(\"washerFluid\", washerFluidValues); var malfunctionIndicatorValues = {}; malfunctionIndicatorValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"on\"]; this.malfunctionIndicator = this._buildVehicleInterface(\"malfunctionIndicator\", malfunctionIndicatorValues); var batteryStatusValues = {}; batteryStatusValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"chargeLevel\", \"current\", \"voltage\"]; this.batteryStatus = this._buildVehicleInterface(\"batteryStatus\", batteryStatusValues); var tireValues = {}; tireValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"pressure\", \"pressureLow\", \"temperature\"]; this.tire = this._buildVehicleInterface(\"tire\", tireValues); var driverIdentificationValues = {}; driverIdentificationValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"driverID\", \"keyFobID\"]; this.driverIdentification = this._buildVehicleInterface(\"driverIdentification\", driverIdentificationValues); var languageValues = {}; languageValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"language\"]; this.language = this._buildVehicleInterface(\"language\", languageValues); var unitsOfMeasureValues = {}; unitsOfMeasureValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"isMKSSystem\", \"unitsDistance\", \"unitsFuelConsumption\", \"unitsFuelVolume\", \"unitsSpeed\"]; this.unitsOfMeasure = this._buildVehicleInterface(\"unitsOfMeasure\", unitsOfMeasureValues); var mirrorValues = {}; mirrorValues[ns_vehicleinfo_inject.Zone.LEFT] = {\"mirrorPan\" : 0}; mirrorValues[ns_vehicleinfo_inject.Zone.LEFT] = [\"mirrorPan\", \"mirrorTilt\"]; mirrorValues[ns_vehicleinfo_inject.Zone.RIGHT] = [\"mirrorPan\", \"mirrorTilt\"]; mirrorValues[ns_vehicleinfo_inject.Zone.CENTER] = [\"mirrorPan\", \"mirrorTilt\"]; this.mirror = this._buildVehicleInterface(\"mirror\", mirrorValues); var seatAdjustmentValues = {}; seatAdjustmentValues[ns_vehicleinfo_inject.Zone.FRONT] = [\"reclineSeatBack\", \"seatBackCushion\", \"seatCushionHeight\", \"seatHeadrest\", \"seatSideCusion\", \"seatSlide\"]; seatAdjustmentValues[ns_vehicleinfo_inject.Zone.MIDDLE] = [\"reclineSeatBack\", \"seatBackCushion\", \"seatCushionHeight\", \"seatHeadrest\", \"seatSideCusion\", \"seatSlide\"]; seatAdjustmentValues[ns_vehicleinfo_inject.Zone.REAR] = [\"reclineSeatBack\", \"seatBackCushion\", \"seatCushionHeight\", \"seatHeadrest\", \"seatSideCusion\", \"seatSlide\"]; seatAdjustmentValues[ns_vehicleinfo_inject.Zone.LEFT] = [\"reclineSeatBack\", \"seatBackCushion\", \"seatCushionHeight\", \"seatHeadrest\", \"seatSideCusion\", \"seatSlide\"]; seatAdjustmentValues[ns_vehicleinfo_inject.Zone.RIGHT] = [\"reclineSeatBack\", \"seatBackCushion\", \"seatCushionHeight\", \"seatHeadrest\", \"seatSideCusion\", \"seatSlide\"]; seatAdjustmentValues[ns_vehicleinfo_inject.Zone.CENTER] = [\"reclineSeatBack\", \"seatBackCushion\", \"seatCushionHeight\", \"seatHeadrest\", \"seatSideCusion\", \"seatSlide\"]; this.seatAdjustment = this._buildVehicleInterface(\"seatAdjustment\", seatAdjustmentValues); var steeringWheelValues = {}; steeringWheelValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"steeringWheelPositionTilt\", \"steeringWheelTelescopingPosition\"]; this.steeringWheel = this._buildVehicleInterface(\"steeringWheel\", steeringWheelValues); var driveModeValues = {}; driveModeValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"driveMode\"]; this.driveMode = this._buildVehicleInterface(\"driveMode\", driveModeValues); var dashboardIlluminationValues = {}; dashboardIlluminationValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"dashboardIllumination\"]; this.dashboardIllumination = this._buildVehicleInterface(\"dashboardIllumination\", dashboardIlluminationValues); var vehicleSoundValues = {}; vehicleSoundValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"activeNoiseControlMode\", \"engineSoundEnhancementMode\"]; this.vehicleSound = this._buildVehicleInterface(\"vehicleSound\", vehicleSoundValues); var antilockBrakingSystemValues = {}; antilockBrakingSystemValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"enabled\", \"engaged\"]; this.antilockBrakingSystem = this._buildVehicleInterface(\"antilockBrakingSystem\", antilockBrakingSystemValues); var tractionControlSystemValues = {}; tractionControlSystemValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"enabled\", \"engaged\"]; this.tractionControlSystem = this._buildVehicleInterface(\"tractionControlSystem\", tractionControlSystemValues); var electronicStabilityControlValues = {}; electronicStabilityControlValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"enabled\", \"engaged\"]; this.electronicStabilityControl = this._buildVehicleInterface(\"electronicStabilityControl\", electronicStabilityControlValues); var topSpeedLimitValues = {}; topSpeedLimitValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"speed\"]; this.topSpeedLimit = this._buildVehicleInterface(\"topSpeedLimit\", topSpeedLimitValues); var airbagStatusValues = {}; airbagStatusValues[ns_vehicleinfo_inject.Zone.FRONT] = [\"activated\", \"deployed\"]; airbagStatusValues[ns_vehicleinfo_inject.Zone.REAR] = [\"activated\", \"deployed\"]; airbagStatusValues[ns_vehicleinfo_inject.Zone.MIDDLE] = [\"activated\", \"deployed\"]; airbagStatusValues[ns_vehicleinfo_inject.Zone.LEFT] = [\"activated\", \"deployed\"]; airbagStatusValues[ns_vehicleinfo_inject.Zone.RIGHT] = [\"activated\", \"deployed\"]; this.airbagStatus = this._buildVehicleInterface(\"airbagStatus\", airbagStatusValues); var doorValues = {}; doorValues[ns_vehicleinfo_inject.Zone.FRONT] = [\"lock\", \"status\"]; doorValues[ns_vehicleinfo_inject.Zone.REAR] = [\"lock\", \"status\"]; doorValues[ns_vehicleinfo_inject.Zone.MIDDLE] = [\"lock\", \"status\"]; doorValues[ns_vehicleinfo_inject.Zone.LEFT] = [\"lock\", \"status\"]; doorValues[ns_vehicleinfo_inject.Zone.RIGHT] = [\"lock\", \"status\"]; this.door = this._buildVehicleInterface(\"door\", doorValues); var childSafetyLockValues = {}; childSafetyLockValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"lock\"]; this.childSafetyLock = this._buildVehicleInterface(\"childSafetyLock\", childSafetyLockValues); var seatValues = {}; seatValues[ns_vehicleinfo_inject.Zone.FRONT] = [\"occupant\", \"seatbelt\"]; seatValues[ns_vehicleinfo_inject.Zone.REAR] = [\"occupant\", \"seatbelt\"]; seatValues[ns_vehicleinfo_inject.Zone.MIDDLE] = [\"occupant\", \"seatbelt\"]; seatValues[ns_vehicleinfo_inject.Zone.LEFT] = [\"occupant\", \"seatbelt\"]; seatValues[ns_vehicleinfo_inject.Zone.RIGHT] = [\"occupant\", \"seatbelt\"]; seatValues[ns_vehicleinfo_inject.Zone.CENTER] = [\"occupant\", \"seatbelt\"]; this.seat = this._buildVehicleInterface(\"seat\", seatValues); var temperatureValues = {}; temperatureValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"exteriorTemperature\", \"interiorTemperature\"]; this.temperature = this._buildVehicleInterface(\"temperature\", temperatureValues); var rainSensorValues = {}; rainSensorValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"rain\"]; this.rainSensor = this._buildVehicleInterface(\"rainSensor\", rainSensorValues); var wiperStatusValues = {}; wiperStatusValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"frontWiperSpeed\", \"rearWiperSpeed\"]; this.wiperStatus = this._buildVehicleInterface(\"wiperStatus\", wiperStatusValues); var wiperSettingValues = {}; wiperSettingValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"frontWiperControl\", \"rearWiperControl\"]; this.wiperSetting = this._buildVehicleInterface(\"wiperSetting\", wiperSettingValues); var defrostValues = {}; defrostValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"defrostRearWindow\", \"defrostSideMirrors\", \"defrostWindShield\"]; this.defrost = this._buildVehicleInterface(\"defrost\", defrostValues); var sunroofValues = {}; sunroofValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"openness\", \"tilt\"]; this.sunroof = this._buildVehicleInterface(\"sunroof\", sunroofValues); var convertibleRoofValues = {}; convertibleRoofValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"status\"]; this.convertibleRoof = this._buildVehicleInterface(\"convertibleRoof\", convertibleRoofValues); var sideWindowValues = {}; sideWindowValues[ns_vehicleinfo_inject.Zone.FRONT] = [\"lock\", \"openness\"]; sideWindowValues[ns_vehicleinfo_inject.Zone.REAR] = [\"lock\", \"openness\"]; sideWindowValues[ns_vehicleinfo_inject.Zone.LEFT] = [\"lock\", \"openness\"]; sideWindowValues[ns_vehicleinfo_inject.Zone.RIGHT] = [\"lock\", \"openness\"]; this.sideWindow = this._buildVehicleInterface(\"sideWindow\", sideWindowValues); var climateControlValues = {}; climateControlValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"airConditioning\", \"airRecirculation\", \"airflowDirection\", \"fanSpeedLevel\", \"heater\", \"seatCooler\", \"seatHeater\", \"steeringWheelHeater\", \"targetTemperature\"]; this.climateControl = this._buildVehicleInterface(\"climateControl\", climateControlValues); var laneDepartureDetectionValues = {}; laneDepartureDetectionValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"status\"]; this.laneDepartureDetection = this._buildVehicleInterface(\"laneDepartureDetection\", laneDepartureDetectionValues); var alarmValues = {}; alarmValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"status\"]; this.alarm = this._buildVehicleInterface(\"alarm\", alarmValues); var parkingBrakeValues = {}; parkingBrakeValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"status\"]; this.parkingBrake = this._buildVehicleInterface(\"parkingBrake\", parkingBrakeValues); var parkingLightsValues = {}; parkingLightsValues[ns_vehicleinfo_inject.Zone.m_NO_ZONE] = [\"setting\", \"status\"]; this.parkingLights = this._buildVehicleInterface(\"parkingLights\", parkingLightsValues); }; /** * Helper method to reduce the labor of instantiating VehicleInterfaces */ ns_vehicleinfo_inject.Vehicle.prototype._buildVehicleInterface = function(name, values) { var zoneObj = {}; var interface = new ns_vehicleinfo_inject.VehicleInterface(name, null, null); var zones = []; ns_vehicleinfo_inject._each(values, function(zone, attributes) { if(zone !== ns_vehicleinfo_inject.Zone.m_NO_ZONE) { zones.push(zone); } zoneObj[zone] = {}; zoneObj[zone].values = []; zoneObj[zone].timestamp = 0; if(Object.prototype.toString.call( attributes ) === '[object Object]') { ns_vehicleinfo_inject._each(attributes, function(attribute, defaultValue) { zoneObj[zone].values.push(attribute); var storedVal = interface._getValue(attribute, zone); if(storedVal === \"\" || storedVal === \"null\") { interface._setValue(attribute, defaultValue); } interface[attribute] = defaultValue; }); } else { zoneObj[zone].values = attributes; ns_vehicleinfo_inject._each(attributes, function(i, attribute) { interface[attribute] = null; }); } }); interface.m_valueNames = zoneObj; interface.zones = new ns_vehicleinfo_inject.Zone(zones); return interface; }; ns_vehicleinfo_inject._startTimer = function () { ns_vehicleinfo_inject.m_timer = setInterval ( function () { var LStime = ns_data_storage.getItem (\"abaltatech_vehdata_timestamp\"); ns_vehicleinfo_inject._each ( window.navigator.vehicle, function(i, vehicleInterface) { /* Detect whether the current property is an interface */ if(vehicleInterface instanceof ns_vehicleinfo_inject.VehicleInterface) { var availability = vehicleInterface._getAvailable(); if(availability.availability === ns_vehicleinfo_inject.Availability.AVAILABLE) { ns_vehicleinfo_inject._each(vehicleInterface.m_valueNames, function(zone, info) { if(info.timestamp < LStime) { var vehicleObject = vehicleInterface._getVehicleObject(zone); if(vehicleObject.changed) { ns_vehicleinfo_inject.notificationList .notifyAll(vehicleInterface.m_attrName + \"_\" + zone, [vehicleObject.vehicleObject]); } } }); } if(availability.changed) { ns_vehicleinfo_inject.notificationList.notifyAll( vehicleInterface.m_attrName + \"Available\", [availability.availability]); } } }); }, 1000); }; /** * Helper method to be called by the host app **/ ns_vehicleinfo_inject.Vehicle.prototype._setValue = function (interfaceName, propertyName, value) { if(this.hasOwnProperty(interfaceName)) { var interface = this[interfaceName]; if(interface instanceof ns_vehicleinfo_inject.VehicleInterface) { interface._setValue(propertyName, value, undefined); interface._setAvailable( window.abaltatech.vehicleinfo_inject.Availability.AVAILABLE); } } else { console.log('Invalid interface name: ' + interfaceName); } }; /** * Helper method to be called by the host app **/ ns_vehicleinfo_inject.Vehicle.prototype._enableValue = function (interfaceName, availability) { if(this.hasOwnProperty(interfaceName)) { var interface = this[interfaceName]; if(interface instanceof ns_vehicleinfo_inject.VehicleInterface) { interface._setAvailable( window.abaltatech.vehicleinfo_inject.Availability.AVAILABLE); } } else { console.log('Invalid interface name: ' + interfaceName); } }; /************************************************ * Set the Vehicle API ************************************************/ navigator.vehicle = new ns_vehicleinfo_inject.Vehicle();";
    public static final String WEBLINK_INJECT = "if (typeof (WebLink) === 'undefined') { WebLink = {}; } /*------------ Keyboard support*/ WebLink.inputTypes = ['email', 'number', 'password', 'search', 'tel', 'text',  'url']; WebLink.keyboardInput = null; WebLink.checkForKeyboardInput = function(clientX, clientY) { var element = document.elementFromPoint(clientX, clientY); if(element != null && ( (element.nodeName.toLowerCase() === 'input'  && this.inputTypes.indexOf(element.type) != -1) || element.nodeName.toLowerCase() === 'textarea')) { WebLink.keyboardInput = element; WebLinkHost.showKeyboard(element.type, element.getBoundingClientRect().bottom); } else { WebLinkHost.hideKeyboard(); } }; WebLink.jsTouchAndKeyboard = true; WebLink.eventTypes = WebLink.eventTypes || { 'touch': ['touchstart', 'touchmove', 'touchend'], 'mouse': ['mousedown', 'mousemove', 'mouseup', 'mouseover', 'mouseout', 'click'] }; WebLink.inputTypes = WebLink.inputTypes || ['email', 'number', 'password', 'search', 'tel', 'text',  'url']; WebLink.keyboardInput = null; WebLink.showKeyboard = false; WebLink.hideKeyboard = false; WebLink.GetSearchRect = WebLink.GetSearchRect || function(direction,elementRect){ var center = WebLink.CenterPointForRect(elementRect); return { left: ((direction==='right') ? center.x : 0), right: ((direction==='left') ? center.x : 800), top: ((direction==='down') ? center.y : 0), bottom: ((direction==='up') ? center.y : 480) }; }; WebLink.FindButton = WebLink.FindButton || function(direction,element){ if(direction === null) { var searchRect = element.getBoundingClientRect(); var target = WebLink.RecursiveElementFind(direction,element,searchRect,document); return target; } else if(element && element.getBoundingClientRect) { var rect = element.getBoundingClientRect(); var searchRect = WebLink.GetSearchRect(direction,rect); var target = WebLink.RecursiveElementFind(direction,element,searchRect,document); return target; } else { var searchRect = { top:0,left: 0,bottom:480,right:800 }; var target = WebLink.RecursiveElementFind(direction,element,searchRect,document); return target; } }; WebLink.CenterPointForElement = WebLink.CenterPointForElement || function(element){ if(element && element.getBoundingClientRect){ var rect = element.getBoundingClientRect(); return { x: rect.left+(rect.right - rect.left)/2 , y: rect.top+(rect.bottom - rect.top)/2 }; } return { x: 0 , y: 0 }; }; WebLink.CenterPointForRect = WebLink.CenterPointForRect || function(rect){ return { x: rect.left+(rect.right - rect.left)/2 , y: rect.top+(rect.bottom - rect.top)/2 }; }; WebLink.ToPointForElement = WebLink.ToPointForElement || function(direction,element){ if(element) { var rect = element.getBoundingClientRect(); if(direction === 'right') { return { x: rect.left , y: rect.top+(rect.bottom - rect.top)/2 }; } else if(direction === 'left') { return { x: rect.right , y: rect.top+(rect.bottom - rect.top)/2 }; } else if(direction === 'up') { return { x: rect.left+(rect.right - rect.left)/2 , y: rect.bottom }; } else if(direction === 'down') { return { x: rect.left+(rect.right - rect.left)/2 , y: rect.top  }; } return { x: rect.left+(rect.right - rect.left)/2 , y: rect.top+(rect.bottom - rect.top)/2 }; } return {x:0,y:0}; }; WebLink.GetXBias = WebLink.GetXBias || function(direction){ if(direction === 'down'||direction === 'up') return 5.0; return 1.0; }; WebLink.GetYBias = WebLink.GetYBias || function(direction){ if(direction === 'right'||direction === 'left') return 5.0; return 1.0; }; WebLink.DistanceBiased = WebLink.DistanceBiased || function(direction,point1,point2){ var xs = 0; var ys = 0; xs = point2.x - point1.x; xs = xs * xs ; ys = point2.y - point1.y; ys = ys * ys ; return Math.sqrt( xs* WebLink.GetXBias(direction) + ys* WebLink.GetYBias(direction) ); }; WebLink.IsPointCloser = WebLink.IsPointCloser || function(direction,original,best,next){ var dist_best = WebLink.DistanceBiased(direction,original,best); var dist_next = WebLink.DistanceBiased(direction,original,next); return dist_best >= dist_next; }; WebLink.RectContainsPoint = WebLink.RectContainsPoint || function(rect,point){ return rect.left < point.x && rect.right > point.x && rect.top < point.y && rect.bottom > point.y; }; WebLink.HasInteractiveEvents = WebLink.HasInteractiveEvents || function(object) { if(object) { return object['touchstart'] || object['touchend'] || object['click'] || object['mousedown'] || object['mouseup']; } return false; }; WebLink.ShouldSelectElement = WebLink.ShouldSelectElement || function(element){ if(element && element.getBoundingClientRect){ var events = (window.jQuery) ? $._data($(element)[0],'events') : null; var should = (element.href || events || element.ontouchevent || element.ontouchstart || element.onmousedown || element.onclick || element.onkeydown); var should = should || WebLink.HasInteractiveEvents(element.eventListenerList); if(element.nodeName.toLowerCase().indexOf('input')!== -1 || element.nodeName.toLowerCase().indexOf('textarea')!== -1 || element.nodeName.toLowerCase().indexOf('button')!== -1) { should = true; } if(should){ var style = window.getComputedStyle(element); if(style.visibility === 'hidden' || style.display === 'none'){ should = false; } } return should; } return false; }; WebLink.RecursiveElementFind = WebLink.RecursiveElementFind || function(direction,originalElement,searchRect,currentSearchElement){ var childBestMatchElement = null; if(currentSearchElement && currentSearchElement.childNodes && currentSearchElement.childNodes.length) { var len = currentSearchElement.childNodes.length; for(var i=0;i<len;i++) { var child = currentSearchElement.childNodes[i]; var childBestElement = WebLink.RecursiveElementFind(direction,originalElement,searchRect,child); if(childBestElement) { var goalPt = WebLink.CenterPointForElement(originalElement); var currPt = WebLink.CenterPointForElement(childBestElement); var bestPt = WebLink.CenterPointForElement(childBestMatchElement); if(!childBestMatchElement || WebLink.IsPointCloser(direction,goalPt,bestPt,currPt)){ childBestMatchElement = childBestElement; } } } } if(childBestMatchElement) { return childBestMatchElement; } if(WebLink.ShouldSelectElement(currentSearchElement)) { var rect = currentSearchElement.getBoundingClientRect(); var currPt = WebLink.CenterPointForElement(currentSearchElement); var area = rect.width * rect.height; if(area > 0 && WebLink.RectContainsPoint(searchRect,currPt)) { return currentSearchElement; } } return null; }; WebLink.activeTouch = WebLink.activeTouch || null; WebLink.activeElement= WebLink.activeElement || null; WebLink.activeElementPoint = WebLink.activeElementPoint || null; WebLink.directionFromKey = WebLink.directionFromKey || function(keyCode){ switch(keyCode){ case 18: return 'left'; case 19: return 'up'; case 20: return 'right'; case 21: return 'down'; }; return null; }; WebLink.keyCodeIsNavigation = WebLink.keyCodeIsNavigation || function(keyCode){ return keyCode === 4 || keyCode === 18 || keyCode === 19 || keyCode === 20 || keyCode === 21; }; WebLink.elementFromPointFix = WebLink.elementFromPointFix || function(x,y){ var element = document.elementFromPoint(x,y); if(element instanceof HTMLIFrameElement) { var rect = element.getBoundingClientRect(); element = element.contentWindow.document.elementFromPoint(x - rect.left, y - rect.top); } return element; }; WebLink.arrowKeyNavigation = WebLink.arrowKeyNavigation || function(eventType,keyCode) { switch (keyCode) { case 4:/*enter*/ WebLink.activeElementPoint = WebLink.CenterPointForElement(WebLink.activeElement); var element = WebLink.elementFromPointFix(WebLink.activeElementPoint.x,WebLink.activeElementPoint.y); var x = WebLink.activeElementPoint.x; var y = WebLink.activeElementPoint.y; element.focus(); if(eventType === 'keydown'){ WebLink.onEvent('touchstart',x,y,x,y,x,y); } else if(eventType === 'keyup'){ WebLink.onEvent('touchend',x,y,x,y,x,y); WebLink.onEvent('mousedown',x,y,x,y,x,y); WebLink.onEvent('mouseup',x,y,x,y,x,y); WebLink.onEvent('click',x,y,x,y,x,y); WebLink.onEvent('tap',x,y,x,y,x,y); setTimeout(function(){ var element = null; if((element=WebLink.FindButton(null,WebLink.activeElement))) { } else if((element=document.getElementById(WebLink.activeElement.id))) { } else if((element=document.elementFromPoint(WebLink.activeElementPoint.x,WebLink.activeElementPoint.y))) { } else { } WebLink.UnselectElement(WebLink.activeElement); WebLink.activeElement = element; WebLink.SelectElement(WebLink.activeElement); },100); } else if(eventType === 'keypress'){ WebLink.showKeyboard = false; WebLink.checkForKeyboardInput(x,y); if(WebLink.showKeyboard){ WebLink.hideKeyboard = false; } else { WebLink.hideKeyboard = true; } } break; case 18: /*left*/ case 19: /*up*/ case 20: /*right*/ case 21: /*down*/ var dir = WebLink.directionFromKey(keyCode); if(dir && eventType === 'keypress') { var res = WebLink.FindButton(dir,WebLink.activeElement); if(res) { WebLink.UnselectElement(WebLink.activeElement); WebLink.activeElement = res; WebLink.SelectElement(WebLink.activeElement); } } break; }; }; WebLink.UnselectElement = WebLink.UnselectElement || function(element) { if(element){ var active = WebLink.GetSelectableElement(element); if(active) { active.style.setProperty('outline','0px','important'); active.style.outlineOffset = '0px'; } } }; WebLink.SelectElement = WebLink.SelectElement || function(element) { if(element){ var active = WebLink.GetSelectableElement(element); if(active) { active.style.setProperty('outline','solid red 5px','important'); active.style.outlineOffset = '-5px'; } } }; WebLink.GetSelectableElement  = WebLink.GetSelectableElement || function(element) { if(element.clientWidth && element.clientHeight){ return element; } var maxi = element.children.length; for(var i=0;i<maxi;i++) { var child = element.children[i]; if(child.clientWidth && child.clientHeight) { return child; } } var res = element; while(res) { res = res.parentElement; if(res && res.clientWidth && res.clientHeight){ return res; } } return element; }; WebLink.keyboardEvent = WebLink.keyboardEvent || function (type, keyCode) { WebLink.arrowKeyNavigation(type,keyCode); }; WebLink.getEventTypeByName = WebLink.getEventTypeByName || function(name) { var type = null; for(var key in WebLink.eventTypes) { if (WebLink.eventTypes[key].indexOf(name) != -1) { type = key; break; } } return type; }; WebLink.createTouchEvent = WebLink.createTouchEvent || function(name, pageX , pageY, clientX, clientY, screenX, screenY) { var touch = document.createTouch(window, null, 0, pageX, pageY, screenX, screenY); var touchList = document.createTouchList(touch); var event = document.createEvent('TouchEvent'); event.initTouchEvent(name, true, true, window, 0,  screenX, screenY, clientX, clientY, false, false, false, false, touchList, touchList, touchList, 1.0, 0.0); return event; }; WebLink.createMouseEvent = WebLink.createMouseEvent || function(name, pageX , pageY, clientX, clientY, screenX, screenY) { var event = document.createEvent('MouseEvents'); event.initMouseEvent(name, true, name != 'mousemove', window, 0, screenX, screenY, clientX, clientY, false, false, false, false, 0, null); return event; }; WebLink.onEvent = WebLink.onEvent || function(name, pageX , pageY, clientX, clientY, screenX, screenY) { var type = WebLink.getEventTypeByName(name); var event = null; if(type == 'touch') { event = WebLink.createTouchEvent(name, pageX , pageY, clientX, clientY, screenX, screenY); } else if(type == 'mouse') { event = WebLink.createMouseEvent(name, pageX , pageY, clientX, clientY, screenX, screenY); } var element = document.elementFromPoint(clientX, clientY); if(element instanceof HTMLIFrameElement) { var rect = element.getBoundingClientRect(); element = element.contentWindow.document.elementFromPoint(clientX - rect.left, clientY - rect.top); } if(element != null) { element.dispatchEvent(event); if(name == 'touchstart') { WebLink.activateElement(element); } if(name == 'click') { WebLink.checkForKeyboardInput(element); } } if(name == 'touchend') { WebLink.deactivateElement(); } if(WebLink.showKeyboard == true) { WebLink.showKeyboard = false; return 'showKeyboard'; } }; WebLink.activateElement = WebLink.activateElement || function(element) { element.focus(); var maxBubble = 3; var bubble = 0; while(bubble < maxBubble && element.parentElement != null) { element.className += ' WebLinkActive'; element = element.parentElement; bubble += 1; } }; WebLink.deactivateElement = WebLink.deactivateElement || function() { var elements = document.getElementsByClassName('WebLinkActive'); for(var i = elements.length - 1; i >= 0; --i) { var element = elements[i]; element.className = element.className.replace(/ WebLinkActive/g, ''); } }; /*------------ Select elements support*/ WebLink.onSelectTouchStartFunc = function(e) { console.log(\"onSelectTouchStartFunc\"); e.preventDefault(); }; WebLink.onSelectTouchEndFunc = function(e) { console.log(\"onSelectTouchEndFunc\"); e.preventDefault(); }; WebLink.onSelectClickFunc = function(e) { console.log(\"onSelectClickFunc\"); e.preventDefault(); }; WebLink.checkSelectElement = function(element) { if(element != null && element.nodeName.toLowerCase() === 'select') { element.addEventListener('touchstart', WebLink.onSelectTouchStartFunc, false); element.addEventListener('touchend', WebLink.onSelectTouchEndFunc, false); element.addEventListener('click', WebLink.onSelectClickFunc, false); console.log(\"SELECT element processed!\"); } }; var all = document.getElementsByTagName(\"*\"); for (var i=0, max=all.length; i < max; i++) { var element = all[i]; WebLink.checkSelectElement(element); } document.addEventListener('DOMNodeInserted', function(event) { var element = event.target; WebLink.checkSelectElement(element); }); WebLink.getLocalApplications = function(callback){ return WebLinkHost.getLocalApplications(callback); }; /*------------ Cross origin HTTP requests support*/ WebLink.enableCrossOriginRequests = function() { WebLink.isCrossOrigin = function(url) { var location = window.location; var a = document.createElement('a'); a.href = url; var result = a.hostname  != location.hostname  || a.port      != location.port      || a.protocol  != location.protocol; return result; }; if(typeof(XMLHttpRequest_original) === 'undefined') { XMLHttpRequest_original = XMLHttpRequest; } XMLHttpRequest = function() { this.ID = ++XMLHttpRequest.lastID; XMLHttpRequest.requestsList[this.ID] = this; }; XMLHttpRequest.requestsList = {}; XMLHttpRequest.lastID = -1; XMLHttpRequest.UNSENT            = 0; XMLHttpRequest.OPENED            = 1; XMLHttpRequest.HEADERS_RECEIVED  = 2; XMLHttpRequest.LOADING           = 3; XMLHttpRequest.DONE              = 4; XMLHttpRequest.prototype.UNSENT            = XMLHttpRequest.UNSENT; XMLHttpRequest.prototype.OPENED            = XMLHttpRequest.OPENED; XMLHttpRequest.prototype.HEADERS_RECEIVED  = XMLHttpRequest.HEADERS_RECEIVED; XMLHttpRequest.prototype.LOADING           = XMLHttpRequest.LOADING; XMLHttpRequest.prototype.DONE              = XMLHttpRequest.DONE; XMLHttpRequest.prototype.readyState        = XMLHttpRequest.UNSENT; XMLHttpRequest.prototype.responseText  = ''; XMLHttpRequest.prototype.responseXML   = null; XMLHttpRequest.prototype.status        = 0; XMLHttpRequest.prototype.statusText    = ''; XMLHttpRequest.prototype.onreadystatechange  = null; XMLHttpRequest.prototype.isCrossOrigin = false; XMLHttpRequest.prototype.open = function(method, url, async, user, password) { this.isCrossOrigin = WebLink.isCrossOrigin(url); WebLinkHost.openRequest(this.ID, method, url); }; XMLHttpRequest.prototype.setRequestHeader = function(header, value) { WebLinkHost.setRequestHeader(this.ID, header, value); }; XMLHttpRequest.prototype.send = function(data) { var dataString = (typeof(data) !== 'undefined' && data != null) ? JSON.stringify(data) : ''; WebLinkHost.sendRequest(this.ID, dataString); }; XMLHttpRequest.prototype.abort = function() { WebLinkHost.abortRequest(this.ID); }; XMLHttpRequest.prototype.getAllResponseHeaders = function() { return this._responseHeaders; }; XMLHttpRequest.prototype.getResponseHeader = function(header) { return this._responseHeaders[header]; }; };";
    public static final String WEBLINK_INJECT_KEYBOARD = "console.log(\"Keyboard JS injection started... ...\"); if (typeof (WebLink) === 'undefined') { WebLink = {}; } WebLink.log = function(text) { console.log(text); }; /*------------ Keyboard support*/ WebLink.inputTypes = ['email', 'number', 'password', 'search', 'tel', 'text',  'url']; WebLink.keyboardInput = null; WebLink.checkForKeyboardInput = function(clientX, clientY) { console.log(\"1\"); var element = document.elementFromPoint(clientX, clientY); console.log(\"2\"); if(element != null && ( (element.nodeName.toLowerCase() === 'input'  && this.inputTypes.indexOf(element.type) != -1) || element.nodeName.toLowerCase() === 'textarea')) { console.log(\"Show 1\"); WebLink.keyboardInput = element; console.log(\"Show 2\"); WebLinkHost.showKeyboard(element.type, element.getBoundingClientRect().bottom); console.log(\"Show 3\"); } else { console.log(\"element:\"); console.log(element); if(element != null) { console.log(element.nodeName); console.log(element.nodeName.toLowerCase()); console.log(element.type); } console.log(\"Hide 1\"); WebLinkHost.hideKeyboard(); console.log(\"Hide 2\"); } }; /*------------ Select elements support*/ WebLink.onSelectTouchStartFunc = function(e) { console.log(\"onSelectTouchStartFunc\"); e.preventDefault(); }; WebLink.onSelectTouchEndFunc = function(e) { console.log(\"onSelectTouchEndFunc\"); e.preventDefault(); }; WebLink.onSelectClickFunc = function(e) { console.log(\"onSelectClickFunc\"); e.preventDefault(); }; WebLink.checkSelectElement = function(element) { if(element != null && element.nodeName.toLowerCase() === 'select') { element.addEventListener('touchstart', WebLink.onSelectTouchStartFunc, false); element.addEventListener('touchend', WebLink.onSelectTouchEndFunc, false); element.addEventListener('click', WebLink.onSelectClickFunc, false); console.log(\"SELECT element processed!\"); } }; var all = document.getElementsByTagName(\"*\"); for (var i=0, max=all.length; i < max; i++) { var element = all[i]; WebLink.checkSelectElement(element); } document.addEventListener('DOMNodeInserted', function(event) { var element = event.target; WebLink.checkSelectElement(element); }); console.log(\"Keyboard JS injection finished...\");";
    public static final String WEBLINK_INJECT_NOTIFICATIONS = "if (typeof (WebLink) === 'undefined') { WebLink = {}; } if (typeof (WebLink.notifications) === 'undefined') { WebLink.notifications = {}; } if (typeof (WebLink.notifications.NotificationList) === 'undefined') { WebLink.notifications.NotificationList = {}; } if (typeof (WebLink.notifications.findNotification)  === 'undefined') { WebLink.notifications.findNotification = function(notificationID) { if(WebLink.notifications.NotificationList) { var obj = WebLink.notifications.NotificationList[notificationID]; if(typeof(obj) === 'object' && obj && obj.internalID && obj.internalID === notificationID) { return obj; } } return null; }; } if (typeof (WebLink.notifications.onNotificationEvent)  === 'undefined') { WebLink.notifications.onNotificationEvent = function(eventName, notificationID) { var not = WebLink.notifications.findNotification(notificationID - 0); if(not && typeof(not[eventName]) === 'function') { not[eventName].apply(not, []); /* Close the notification */ if('onclose' === eventName || 'onerror' === eventName) { /* TODO: maybe also close upon onclick()??? */ WebLink.notifications.NotificationList[notificationID - 0] = null; } } }; } if (typeof (WebLink.notifications.closeNotification)  === 'undefined') { WebLink.notifications.closeNotification = function(notificationID) { var not = WebLink.notifications.findNotification(notificationID - 0); if(not) { WLJSManager.closeNotification(notificationID - 0); } }; } if (typeof (WebLink.notifications.qualifyURL)  === 'undefined') { WebLink.notifications.qualifyURL = function(url) { var a = document.createElement('a'); a.href = url; var res = a.href; return res; }; } if (typeof (WebLink.notifications.printURL)  === 'undefined') { console.log('.  8'); WebLink.notifications.printURL = function(url) { var res = WebLink.notifications.qualifyURL(url); console.log(res); }; } if (typeof (WebLink.notifications.toNotNullString)  === 'undefined') { WebLink.notifications.toNotNullString = function(str) { var res = ''; if(typeof (str) === 'undefined' || (typeof (str) === 'object' && !str)) { res = ''; } else { res = '' + str; } return res; }; } /************************************************ ** Replace the HTML 5 Notifications ************************************************/ window.Notification = function (title, options) { /* Construct the notification object */ this.title = title; this.dir = 'auto'; this.lang = ''; this.body = ''; this.tag = ''; this.icon = ''; this.timeout = 0; this.showProgress = false; /* Copy the options */ if (!!options) { if (!!options.dir) { this.dir = options.dir; } this.lang = WebLink.notifications.toNotNullString(options.lang); this.body = WebLink.notifications.toNotNullString(options.body); this.tag = WebLink.notifications.toNotNullString(options.tag); this.icon = WebLink.notifications.toNotNullString(options.icon); if(typeof options.timeout === 'number' && options.timeout > 0) { var intvalue = Math.round( options.timeout ); this.timeout = intvalue; } else { this.timeout = 0; } if(typeof options.showProgress === 'boolean') { this.showProgress = options.showProgress; } } var icon = this.icon; if(icon.length > 0) { icon = WebLink.notifications.qualifyURL(icon); } var id = WLJSManager.addNotification(title, icon, this.tag, this.timeout, this.showProgress); this.internalID = id; WebLink.notifications.NotificationList[id] = this; this.close = function () { WebLink.notifications.closeNotification(this.internalID); }; }; window.Notification.permission = 'granted'; window.Notification.requestPermission = function (callback) { /* We always allow notifications. */ if (typeof callback === 'function') { /* Notify asynchronously */ setTimeout(function () { callback('granted'); }, 1); } }; Notification = window.Notification;";
    public static final String WEBLINK_INJECT_SPEECHRECOGNITION = "if (typeof (WebLink) === 'undefined') { WebLink = {}; } if (typeof (WebLink.speechrecognition) === 'undefined') { WebLink.speechrecognition = {}; } WebLink.speechrecognition.currentSpeechRecognition = undefined; WebLink.speechrecognition.onError = function(error, message) { console.log('WebLink.speechrecognition.onError'); WebLink.speechrecognition.lastError = error; WebLink.speechrecognition.lastMessage = message; if(WebLink.speechrecognition.currentSpeechRecognition) { var recognition = WebLink.speechrecognition.currentSpeechRecognition; WebLink.speechrecognition.currentSpeechRecognition = undefined; recognition._onError(error, message); } }; WebLink.speechrecognition.onResult = function(result) { console.log('WebLink.speechrecognition.onResult'); WebLink.speechrecognition.lastResult = result; if(WebLink.speechrecognition.currentSpeechRecognition) { var recognition = WebLink.speechrecognition.currentSpeechRecognition; WebLink.speechrecognition.currentSpeechRecognition = undefined; recognition._onResult(result); } }; /* WebLink.speechrecognition.onError = function(error, message) { console.log('WebLink.speechrecognition.onError'); WebLink.speechrecognition.lastError = error; WebLink.speechrecognition.lastMessage = message; }; WebLink.speechrecognition.onResult = function(result) { console.log('WebLink.speechrecognition.onResult'); WebLink.speechrecognition.lastResult = result; }; */ /************************************************ ** Replace the HTML 5 SpeechRecognition ************************************************/ window.SpeechRecognition = function () { /* Construct the notification object */ this.continuous = false; this.lang = \"\"; this.grammars = []; this.interimResults = false; this.maxAlternatives = 1; this.serviceURI = undefined; /* Not used! */ this.onaudiostart = undefined; this.onsoundstart = undefined; this.onspeechstart = undefined; this.onspeechend = undefined; this.onsoundend = undefined; this.onaudioend = undefined; this.onresult = undefined; this.onnomatch = undefined; this.onerror = undefined; this.onstart = undefined; this.onend = undefined; this._onError = function(err, msg) { if(this.onerror && typeof(this.onerror) === 'function') { var e = { error: err, message: msg }; try { this.onerror(e); } catch(err1) { console.log(\"Error in onerror()\"); console.log(err1); } } if(this.onend && typeof(this.onend) === 'function') { try { this.onend(); } catch(err2) { console.log(\"Error in onend()\"); console.log(err2); } } }; this._onResult = function(result) { if(this.onresult && typeof(this.onresult) === 'function') { var obj = \"\"; try { obj = eval(result); } catch(err1) { console.log(\"Error in eval()\"); console.log(err1); } try { this.onresult(obj); } catch(err2) { console.log(\"Error in onresult()\"); console.log(err2); } } if(this.onend && typeof(this.onend) === 'function') { this.onend(); } }; this.start = function() { if(WebLink.speechrecognition.currentSpeechRecognition) { /* this is an error, let's wait for the other SR to finish! */ this._onError(\"service-not-allowed\", \"Another Speech Recognition is ongoing!\"); return; } WebLink.speechrecognition.currentSpeechRecognition = this; WLJSManager.startSpeechRecognition(this.maxAlternatives - 0); }; this.stop = function() { if(WebLink.speechrecognition.currentSpeechRecognition != this) { /* This is an error */ return; } this._onError(\"aborted\", \"aborted\"); WLJSManager.stopSpeechRecognition(); }; this.abort = function() { this.stop(); }; }; SpeechRecognition = window.SpeechRecognition; console.log('SpeechRecognition injected');";

    WebViewJSInjections() throws  {
    }

    /* JADX WARNING: inconsistent code. */
    /* Code decompiled incorrectly, please refer to instructions dump. */
    @android.annotation.SuppressLint({"DefaultLocale"})
    static java.lang.String getResource(java.lang.String r13, android.content.Context r14) throws  {
        /*
        r0 = resolveID(r13);
        if (r0 == 0) goto L_0x0055;
    L_0x0006:
        r1 = r14.getResources();
        r2 = r1.openRawResource(r0);
        r3 = new java.io.ByteArrayOutputStream;
        r3.<init>();
        r5 = 4096; // 0x1000 float:5.74E-42 double:2.0237E-320;
        r4 = new byte[r5];
    L_0x0017:
        r0 = r4.length;
        r5 = 0;
        r0 = r2.read(r4, r5, r0);	 Catch:{ IOException -> 0x0038, Throwable -> 0x004b }
        r5 = -1;
        if (r0 != r5) goto L_0x0033;
    L_0x0020:
        r13 = new java.lang.String;	 Catch:{ IOException -> 0x0038, Throwable -> 0x004b }
        r4 = r3.toByteArray();	 Catch:{ IOException -> 0x0038, Throwable -> 0x004b }
        r7 = "UTF-8";
        r6 = java.nio.charset.Charset.forName(r7);	 Catch:{ IOException -> 0x0038, Throwable -> 0x004b }
        r13.<init>(r4, r6);	 Catch:{ IOException -> 0x0038, Throwable -> 0x004b }
        r2.close();	 Catch:{ IOException -> 0x0046 }
        return r13;
    L_0x0033:
        r5 = 0;
        r3.write(r4, r5, r0);	 Catch:{ IOException -> 0x0038, Throwable -> 0x004b }
        goto L_0x0017;
    L_0x0038:
        r8 = move-exception;
        r2.close();	 Catch:{ IOException -> 0x003f }
        r7 = "";
        return r7;
    L_0x003f:
        r9 = move-exception;
        r9.printStackTrace();
        r7 = "";
        return r7;
    L_0x0046:
        r10 = move-exception;
        r10.printStackTrace();
        return r13;
    L_0x004b:
        r11 = move-exception;
        r2.close();	 Catch:{ IOException -> 0x0050 }
    L_0x004f:
        throw r11;
    L_0x0050:
        r12 = move-exception;
        r12.printStackTrace();
        goto L_0x004f;
    L_0x0055:
        r13 = r13.toUpperCase();
        r13 = resolveConstant(r13);
        return r13;
        */
        throw new UnsupportedOperationException("Method not decompiled: com.abaltatech.mcp.weblink.sdk.webview.WebViewJSInjections.getResource(java.lang.String, android.content.Context):java.lang.String");
    }

    private static int resolveID(String $r0) throws  {
        return resolveID($r0, "com.abaltatech.mcp.weblink.sdk.R$raw");
    }

    private static int resolveID(String $r0, String $r1) throws  {
        try {
            Field $r3 = Class.forName($r1).getDeclaredField($r0);
            if ($r3 != null) {
                return $r3.getInt(null);
            }
            return 0;
        } catch (ClassNotFoundException $r4) {
            $r4.printStackTrace();
            return 0;
        } catch (NoSuchFieldException $r5) {
            $r5.printStackTrace();
            return 0;
        } catch (IllegalAccessException $r6) {
            $r6.printStackTrace();
            return 0;
        } catch (IllegalArgumentException $r7) {
            $r7.printStackTrace();
            return 0;
        }
    }

    private static String resolveConstant(String $r0) throws  {
        try {
            Field $r2 = WebViewJSInjections.class.getDeclaredField($r0);
            if ($r2 != null) {
                return $r2.get(null).toString();
            }
            return "";
        } catch (NoSuchFieldException $r4) {
            $r4.printStackTrace();
            return "";
        } catch (IllegalAccessException $r5) {
            $r5.printStackTrace();
            return "";
        } catch (IllegalArgumentException $r6) {
            $r6.printStackTrace();
            return "";
        }
    }
}
